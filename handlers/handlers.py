from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram import types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
# from keyboards.kb_common import *
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio


router = Router()


class MakeOrder(StatesGroup):
    start_message = State()
    name = State()
    phone = State()
    start_message_2 = State()
    help_state = State()
    help_state_message = State()
    help_state_phoneme = State()  # –ê –ø–æ—Ç–æ–º —Å–±—Ä–æ—Å —Å—Ç–µ–π—Ç–∞ –∏–ª–∏ —á–∏ —à–æ
    start_message_3 = State()  # –¢—É—Ç —É–∫–∞–∑—ã–≤–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–≤—Ç–æ
    model_auto = State()
    date_auto = State()
    kuzov_auto = State()
    additional_info = State()
    type_of = State()
    material_of = State()
    color_of = State()
    color_cover = State()
    color_cant = State()
    dopniki = State()
    pyatka = State()
    shield = State()
    final = State()
    wait30 = State()
    wait120 = State()
    wait1440 = State()

# –≠—Ç–æ –µ—â–µ –Ω–µ –∫–æ–Ω–µ—Ü –±–ª–∏–Ω

# @router.message(F.animation)
# async def echo_gif(message: Message):
#     await message.reply_animation(message.animation.file_id)


@router.message(MakeOrder.start_message)
@router.message(Command("start"))
async def cmd_start(message: Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–µ—Ö–∞–ª–∏",
        callback_data="poehali")
    )
    await message.answer(
        text="–ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ\n –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–≤—Ä–∏–∫–∏ Eva Standart –≤ —Ç–≤–æ–µ –∞–≤—Ç–æ.\n\n\
–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n\n \
–¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–µ—Ö –±–ª–æ–∫–∞—Ö:\n\
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\
2. –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –∫–∞–Ω—Ç–∞\n\
3. –£–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–∏–Ω—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n \
–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Äüëá\n",
        reply_markup=builder.as_markup()
    )

    await state.set_state(MakeOrder.start_message)


@router.callback_query(F.data == 'Back_to_start')
async def back2start(query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–µ—Ö–∞–ª–∏",
        callback_data="poehali")
    )
    await query.message.edit_text(
        text="–ü—Ä–∏–≤–µ—Ç! –° –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞ —Ç—ã –º–æ–∂–µ—à—å –±—ã—Å—Ç—Ä–æ\n –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –∫–æ–≤—Ä–∏–∫–∏ Eva Standart –≤ —Ç–≤–æ–µ –∞–≤—Ç–æ.\n\n\
–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç? \n\n \
–¢–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Ç—Ä–µ—Ö –±–ª–æ–∫–∞—Ö:\n\n\
1. –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª—è\n\
2. –í—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–æ–≤ –∏ –∫–∞–Ω—Ç–∞\n\
3. –£–∫–∞–∑–∞—Ç—å –¥–æ–ø–æ–ª–∏–Ω—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã\n\n \
–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –ø–æ–¥–±–æ—Äüëá\n",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.start_message)


@router.message(MakeOrder.start_message)
@router.callback_query(F.data == "poehali")
async def set_name(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(
        text="–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?"
    )
    await state.set_state(MakeOrder.name)
    current_state = await state.get_state()
    print(current_state)
    # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç
    # await asyncio.sleep(15)
    # if (current_state == await state.get_state()):
    #     await query.message.edit_text(text='–ø–æ–º–µ–Ω—è–ª–æ—Å—å')
    # else:
    #     pass


@router.message(MakeOrder.name)
async def set_phone(message: Message, state: FSMContext):
    await state.update_data(chosen_name=message.text)
    user_data = await state.get_data()  # –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å –ø–æ–¥–æ–±–Ω–æ–µ
    await message.answer(
        text="–ü–æ—Å–ª–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—è–≤–∫–∏. –î–ª—è —ç—Ç–æ–≥–æ —É–∫–∞–∂–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å —Å–≤—è–∑—å —Å –Ω–∞–º–∏üëá"
    )
    print(f"–ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è {user_data['chosen_name']}")
    await state.set_state(MakeOrder.phone)


@router.message(MakeOrder.phone)
async def start_message(message: Message, state: FSMContext):
    await state.update_data(chosen_phone=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—É–ø–µ—Ä! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ–¥–±–æ—Ä—É",
        callback_data="Super")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="Back_to_start")
    )

    # —Ç—É—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    await message.answer(
        text="–£ –Ω–∞—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–µ—Ç–∫–æ –æ—Ç–ª–∞–∂–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–æ–≤—Ä–∏–∫–æ–≤ –ø–æ –±–æ–ª–µ–µ —á–µ–º 1000 –ª–µ–∫–∞–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ \n \
            –î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–æ–≤ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º EVA-–º–∞—Ç–µ—Ä–∏–∞–ª —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é 3–î-–ø–µ—á–∞—Ç–∏\n \
            –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è - 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —Å –æ–º–µ–Ω—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã) \n \
            \n \
            –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —Å—Ä–µ–¥–Ω–µ–º –∑–∞ —Å–∞–ª–æ–Ω(–±–µ–∑ –±–∞–≥–∞–∂–Ω–∏–∫–∞) - –æ—Ç 3400 —Ä—É–±–ª–µ–π \n",
        reply_markup=builder.as_markup()
    )
    user_data = await state.get_data()  # –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å –ø–æ–¥–æ–±–Ω–æ–µ
    print(
        f"–ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è {user_data['chosen_name']} –∏ —Ç–µ–ª–µ—Ñ–æ–Ω {user_data['chosen_phone']}")
    await state.set_state(MakeOrder.start_message_2)


@router.callback_query(F.data == 'Back')
async def back(query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–°—É–ø–µ—Ä! –ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø–æ–¥–±–æ—Ä—É",
        callback_data="Super")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="Back_to_start")
    )

    # —Ç—É—Ç –≤—Å—Ç–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É
    await query.message.edit_text(
        text="–£ –Ω–∞—Å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–µ —á–µ—Ç–∫–æ –æ—Ç–ª–∞–∂–µ–Ω–Ω–æ–µ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ –∫–æ–≤—Ä–∏–∫–æ–≤ –ø–æ –±–æ–ª–µ–µ —á–µ–º 1000 –ª–µ–∫–∞–ª –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –º–∞—Ä–æ–∫ –∏ –º–æ–¥–µ–ª–µ–π –∞–≤—Ç–æ \n \
            –î–ª—è –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è –∫–æ–≤—Ä–∏–∫–æ–≤ –º—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º EVA-–º–∞—Ç–µ—Ä–∏–∞–ª —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞ –≤—ã—Å–æ–∫–æ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é 3–î-–ø–µ—á–∞—Ç–∏\n \
            –°—Ä–æ–∫ –∏–∑–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è - 2-3 —Ä–∞–±–æ—á–∏—Ö –¥–ª—è —Å –æ–º–µ–Ω—Ç–∞ –≤–Ω–µ—Å–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã (–ø—Ä–µ–¥–æ–ø–ª–∞—Ç—ã) \n \
            \n \
            –¶–µ–Ω–∞ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ —Å —Å—Ä–µ–¥–Ω–µ–º –∑–∞ —Å–∞–ª–æ–Ω(–±–µ–∑ –±–∞–≥–∞–∂–Ω–∏–∫–∞) - –æ—Ç 3400 —Ä—É–±–ª–µ–π \n",
        reply_markup=builder.as_markup()
    )
    user_data = await state.get_data()  # –ø–æ —Ö–æ—Ä–æ—à–µ–º—É –ø–æ—Ç–æ–º —É–±—Ä–∞—Ç—å –ø–æ–¥–æ–±–Ω–æ–µ
    print(
        f"–ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è {user_data['chosen_name']} –∏ —Ç–µ–ª–µ—Ñ–æ–Ω {user_data['chosen_phone']}")
    await state.set_state(MakeOrder.start_message_2)

# –¢—É—Ç –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —Å–¥–µ–ª–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –æ –∑–≤–æ–Ω–∫–µ –Ω–∞ –ø–æ—á—Ç—É


@router.callback_query(F.data == 'help')
async def help_message(query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–µ—Ä–µ–∑–≤–æ–Ω–∏—Ç–µ –º–Ω–µ",
        callback_data="callme")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ",
        callback_data="textme")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="Back")
    )
    await query.message.edit_text(
        text='–í–æ–∑–º–æ–∂–Ω–æ, —É —Ç–µ–±—è –ø–æ—è–≤–∏–ª–∏—Å—å —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–∏ –∑–∞–∫–∞–∑–µ —á–µ—Ä–µ–∑ –±–æ—Çüò¢\n\
        \n\
        –ú—ã –≥–æ—Ç–æ–≤—ã –ø—Ä–æ–∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (914)5-501-502 –∏–ª–∏ —Å–≤—è–∂–∏—Å—å —Å –Ω–∞–º–∏ –ª—é–±—ã–º –¥—Ä—É–≥–∏–º —É–¥–æ–±–Ω—ã–º —Å–ø–æ—Å–æ–±–æ–º',
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.help_state)


@router.callback_query(F.data == 'callme')
async def call_me(query: CallbackQuery, state: FSMContext):
    await query.message.edit_text(text='–ü—Ä–∏–Ω—è–ª–∏! –ü–µ—Ä–µ–∑–≤–æ–Ω–∏–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è ü§ù')
    pass  # –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    await state.set_state(MakeOrder.help_state_phoneme)


@router.callback_query(F.data == 'textme')
async def text_me(query: CallbackQuery, state: FSMContext):
    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å email —Å –ø—Ä–æ—Å—å–±–æ–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞(–í–∞—Ç—Å–∞–ø –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç—å —à–∞—Ä–∏–Ω–≥ —Å–≤–æ–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞?)
    await query.message.edit_text(text='–û—Ç–ª–∏—á–Ω–æ, –º—ã —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!')
    pass
    await state.set_state(MakeOrder.help_state_message)


@router.callback_query(F.data == 'Super')
async def order(query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–£–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–µ–≥–æ –∞–≤—Ç–æ",
        callback_data="auto")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back")
    )
    await query.message.edit_text(
        text='–ß—Ç–æ–±—ã –∫–æ–≤—Ä–∏–∫–∏ –ª–µ–≥–ª–∏ —á–µ—Ç–∫–æ, –Ω–∞–º –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è üëå\n\
        \n \
        –í —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –Ω–∏–∂–µ —É–∫–∞–∂–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–≤–æ–µ–≥–æ –∞–≤—Ç–æ \n \
        –í –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Ç—ã —Å–º–æ–∂–µ—à—å –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–µ–π. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å"',
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.start_message_3)


@router.callback_query(F.data == 'auto')
@router.message(MakeOrder.start_message_3)
async def order_1(query: CallbackQuery, state: FSMContext):
    await query.message.answer(
        text='–ì–¥–µ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ç–æ—á–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Ç–≤–æ–µ–≥–æ –∞–≤—Ç–æ?(–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏)'
    )
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_0")
    )
    await query.message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä–∫—É –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ',
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.model_auto)


@router.message(MakeOrder.model_auto)
async def order_2(message: Message, state: FSMContext):
    await state.update_data(chosen_model=message.text)
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_1")
    )
    await message.answer(
        text="–ß—Ç–æ–±—ã –¥–æ–ª–≥–æ –Ω–µ –∏—Å–∫–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, –ø—Ä–æ—Å—Ç–æ –æ—Ç–∫—Ä–æ–π —Å–≤–∏–¥-–≤–æ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–≥–ª—è–Ω–∏ –≤ –ü–¢–°(–∫–∞—Ä—Ç–∏–Ω–∫–∞)"
    )
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞',
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.date_auto)


@router.message(MakeOrder.date_auto)
async def order_3(message: Message, state: FSMContext):
    await state.update_data(chosen_date=message.text)
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_2")
    )
    await message.answer(
        text="–ö–∞—Ä—Ç–∏–Ω–∫–∞"
    )
    await message.answer(
        text='–£–∫–∞–∂–∏—Ç–µ –∫–∞–∫–æ–π –∫—É–∑–æ–≤ —É –∞–≤—Ç–æ'
    )
    await state.set_state(MakeOrder.kuzov_auto)


@router.message(MakeOrder.kuzov_auto)
async def order_4(message: Message, state: FSMContext):
    await state.update_data(chosen_kuzov=message.text)
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_3")
    )
    await message.answer(
        text="–ö–∞—Ä—Ç–∏–Ω–∫–∞"
    )
    await message.answer(
        text='1. –ë–µ–Ω–∑–∏–Ω/–¥–∏–∑–µ–ª—å/–≥–∏–±—Ä–∏–¥ \n \
            2. –∞–≤—Ç–æ–º–∞—Ç/–º–µ—Ö–∞–Ω–∏–∫–∞ \n \
            3. —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–ª—è : –ø—Ä–∞–≤—ã–π/–ª–µ–≤—ã–π \n \
            –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —ç—Ç–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ', reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.additional_info)


@router.message(MakeOrder.additional_info)
async def order_5(message: Message, state: FSMContext):
    await state.update_data(chosen_info=message.text)
    user_data = await state.get_data()
    print(
        f"–ö–ª–∏–µ–Ω—Ç –≤–≤–µ–ª –∏–º—è {user_data['chosen_name']} –∏ —Ç–µ–ª–µ—Ñ–æ–Ω {user_data['chosen_phone']} –∞ —Ç–∞–∫ –∂–µ {user_data['chosen_model']} {user_data['chosen_kuzov']} {user_data['chosen_date']} {user_data['chosen_info']} "
    )
    await message.answer(
        text='–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–∞–º–æ–º—É –ø—Ä–∏—è—Ç–Ω–æ–º—É –±–ª–æ–∫—É) –í—ã–±–µ—Ä–∏ —Ç–æ, –∫–∞–∫ –±—É–¥—É—Ç –≤—ã–≥–ª—è–¥–µ—Ç—å —Ç–≤–æ–∏ –±—É–¥—É—â–∏–µ –∫–æ–≤—Ä–∏–∫–∏'
    )
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_4")
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–µ—Ç–µ —Ç–∏–ø –∫–æ–≤—Ä–∏–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å –µ–≥–æ –Ω–æ–º–µ—Ä –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.type_of)

# –î–æ–±–∞–≤–∏—Ç—å –≥–∏—Ñ–∫—É

#
#
# —Ç—É—Ç –Ω–∞–¥–æ –¥–æ–±–∞–≤–∏—Ç—å –≤—ã–±–æ—Ä —Ä–æ–º–± –∏–ª–∏ —Å–æ—Ç–∞


@router.message(MakeOrder.type_of)
async def order_6(message: Message, state: FSMContext):
    await state.update_data(chosen_typeof=message.text)
    builder = InlineKeyboardBuilder()

    builder.add(types.InlineKeyboardButton(
        text="–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø –∫–æ–≤—Ä–∏–∫–∞",
        callback_data="choose_type")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_5")
    )
    await message.answer(
        text='–ù–∞—à–∏ –∫–æ–≤—Ä–∏–∫–∏: \n \
‚ñ´Ô∏è–±–µ–∑ –∑–∞–ø–∞—Ö–∞ \n \
‚ñ´Ô∏è–Ω–µ –≤–ø–∏—Ç—ã–≤–∞—é—Ç –≤–ª–∞–≥—É \n \
‚ñ´Ô∏è–ª–æ–∂–∞—Ç—Å—è –±–µ–∑ —â–µ–ª–µ–π –∏ –∑–∞–∑–æ—Ä–æ–≤\n \
‚ñ´Ô∏è–ª–µ–≥–∫–æ –º–æ—é—Ç—Å—è –∏ –æ–±—Å–ª—É–∂–∏–≤–∞—é—Ç—Å—è\n \
‚ñ´Ô∏è—É–¥–µ—Ä–∂–∏–≤–∞—é—Ç –≥—Ä—è–∑—å –∏ –≤–æ–¥—É, –ø–æ—ç—Ç–æ–º—É –æ–±—É–≤—å –æ—Å—Ç–∞–µ—Ç—Å—è —á–∏—Å—Ç–æ–π'
    )
    await message.answer(
        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∫—Ä—ã—Ç–∏—è",
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.material_of)


@router.callback_query(F.data == 'choose_type')
async def ordery_7_1(query: CallbackQuery, state: FSMContext):
    await state.set_state(MakeOrder.material_of)


@router.message(MakeOrder.material_of)
async def order_7(message: Message, state: FSMContext):
    # await state.update_data(chosen_materialof=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_6")
    )
    await message.answer(text='*–∫–∞—Ä—Ç–∏–Ω–∫–∞ —Å –∏–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–æ–π —Å —Ü–≤–µ—Ç–∞–º–∏"')
    await message.answer(
        text='–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ü–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–∞ –∏ —Ü–≤–µ—Ç–∞ –∫–∞–Ω—Ç–∞\n–¶–≤–µ—Ç –Ω–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å ',
        reply_markup=builder.as_markup()
    )
    await state.set_state(MakeOrder.color_cover)


# @router.message(MakeOrder.color_of)
# @router.callback_query(F.data == 'choose_color')
# async def order_7(query: CallbackQuery, state: FSMContext):
#     # await state.update_data(chosen_colorof=message.text)

#     builder = InlineKeyboardBuilder()

#     builder.add(types.InlineKeyboardButton(
#         text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
#         callback_data="help")
#     )
#     builder.add(types.InlineKeyboardButton(
#         text="–ù–∞–∑–∞–¥",
#         callback_data="back_to_input_7")
#     )
#     await query.message.answer_dice()
#     await query.message.edit_text(text='–í—ã–±–µ—Ä–∏ —Ü–≤–µ—Ç –∫–æ–≤—Ä–∏–∫–∞ –∏ –Ω–∞–ø–∏—à–∏ –µ–≥–æ –Ω–æ–º–µ—Ä –≤ –ø–æ–ª–µ –Ω–∏–∂–µ', reply_markup=builder.as_markup)
#     await state.set_state(MakeOrder.color_cover)


@router.message(MakeOrder.color_cover)
async def order_8(message: Message, state: FSMContext):
    await state.update_data(chosen_colorof=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å",
        callback_data="continue_dopnik")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_8")
    )
    await message.answer(text='–í–∏–¥–µ–æ –æ –≤–∞–∂–Ω–æ—Å—Ç–∏ –¥–æ–ø–Ω–∏–∫–æ–≤')
    await message.answer(text='–û—Å—Ç–∞–ª–æ—Å—å –µ—â–µ —á—É—Ç—å —á—É—Ç—å! –ó–∞–ø–æ–ª–Ω–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –≤–∞–∂–Ω—ã–π –±–ª–æ–∫! \n –û—Ç –Ω–µ–≥–æ –∑–∞–≤–∏—Å–∏—Ç, –Ω–∞—Å–∫–æ–ª—å–∫–æ —Ä–æ–≤–Ω–æ –ª—è–≥—É—Ç –∫–æ–≤—Ä–∏–∫–∏', reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.color_cant)


@router.message(MakeOrder.color_cant)
@router.callback_query(F.data == 'continue_dopnik')
async def order_9(query: CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_9")
    )
    await query.message.answer(text='–ö–∞—Ä—Ç–∏–Ω–∫–∞ \n')
    await query.message.answer(text='–£–∫–∞–∂–∏ —Ç–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è –¥–ª—è –∫–æ–≤—Ä–∏–∫–æ–≤ \n\n \
–£ –∫–∞–∂–¥–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –µ—Å—Ç—å —Å–≤–æ–∏ –∑–∞–≤–æ–¥—Å–∫–∏–µ —à—Ç–∞—Ç–Ω—ã–µ –∫—Ä–µ–ø–ª–µ–Ω–∏—è:\n\
-–∫—Ä—é—á–∫–∏\n-—à—Ç—ã—Ä–∏\n-–ø–æ–≤–æ—Ä–æ—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã\n\n\
–û–Ω–∏ –Ω—É–∂–Ω—ã –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏ —Ñ–∏–∫—Å–∞—Ü–∏–∏, —á—Ç–æ–±—ã –∫–æ–≤—Ä–∏–∫ —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –Ω–µ –∑–∞–ø–∞–ª –ø–æ–¥ –ø–µ–¥–∞–ª–∏ –≥–∞–∑–∞ –∏ —Ç–æ—Ä–º–æ–∑–∞', reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.dopniki)


@router.message(MakeOrder.dopniki)
async def order_10(message: Message, state: FSMContext):
    await state.update_data(type_of_fastening=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_10")
    )
    await message.answer(text='–ö–∞—Ä—Ç–∏–Ω–∫–∞ \n')
    await message.answer(text='–í—ã–±–µ—Ä–µ —Ç–∏–ø –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ \n\
–ó–∞—á–µ–º –æ–Ω –≤–æ–æ–±—â–µ –Ω—É–∂–µ–Ω? –ù–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤–º—è—Ç–∏–Ω –∏ —Ç—Ä–µ—â–∏–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.pyatka)


@router.message(MakeOrder.dopniki)
async def order_10(message: Message, state: FSMContext):
    await state.update_data(type_of_fastening=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_11")
    )
    await message.answer(text='–ö–∞—Ä—Ç–∏–Ω–∫–∞ \n')
    await message.answer(text='–í—ã–±–µ—Ä–µ —Ç–∏–ø –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞ \n\
–ó–∞—á–µ–º –æ–Ω –≤–æ–æ–±—â–µ –Ω—É–∂–µ–Ω? –ù–∞–¥–µ–∂–Ω–æ –∑–∞—â–∏—â–∞–µ—Ç –æ—Ç –≤–º—è—Ç–∏–Ω –∏ —Ç—Ä–µ—â–∏–Ω, —É–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—Ä–æ–∫ —Å–ª—É–∂–±—ã –≤–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–≤—Ä–∏–∫–∞', reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.pyatka)


@router.message(MakeOrder.pyatka)
async def order_11(message: Message, state: FSMContext):
    await state.update_data(type_of_pyatka=message.text)
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–î–∞",
        callback_data="yes_shield")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–µ—Ç",
        callback_data="no_shield")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_12")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    await message.answer(text='–í–∏–¥–µ–æ —Å —à–∏–ª—å–¥–∏–∫–∞–º–∏ \n')
    await message.answer(text='–ù—É–∂–Ω—ã –ª–∏ –Ω–∞ —Ç–≤–æ–∏ –∫–æ–≤—Ä–∏–∫–∏ —à–∏–ª—å–¥–∏–∫–∏? \n\
-–±—Ä–µ–Ω–¥–∏—Ä—É—é—Ç –∫–æ–≤—Ä–∏–∫–∏\n-—É–ª—É—á—à–∞—é—Ç –≤–∏–∑—É–∞–ª\n\n –°–º–æ—Ç—Ä–∏ –≤–∏–¥–µ–æ, —á—Ç–æ–±—ã –∑–∞—Ü–µ–Ω–∏—Ç—å –∫–∞–∫ —Å–º–æ—Ç—Ä—è—Ç—Å—è üî•', reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.shield)


@router.message(MakeOrder.shield)
@router.callback_query(F.data == 'yes_shield')
async def order_12_summary(query: CallbackQuery, state: FSMContext):
    await state.update_data(shield='–ù—É–∂–µ–Ω')
    user_data = await state.get_data()
    await query.message.answer(text='–§–æ—Ç–æ')
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 5%",
        callback_data="finally")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_13")
    )
    await query.message.answer(text=f"\
–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –ª–µ–∫–∞–ª–∞ –ø–æ–¥ —Ç–≤–æ–∏ –∫–æ–≤—Ä–∏–∫–∏üî•\n\
–ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–∫–∞–∑–µ –≤–µ—Ä–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω\n\
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –º—ã —Ä–∞–∑–±–µ—Ä–µ–º—Å—è :)\n\
–í–∞—à–µ –∏–º—è: {user_data['chosen_name']}\n\
–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data['chosen_phone']}\n\
–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: {user_data['chosen_model']}\n\
–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {user_data['chosen_date']}\n\
–ö—É–∑–æ–≤ –∞–≤—Ç–æ: {user_data['chosen_kuzov']}\n\
–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data['chosen_info']}\n\
–¢–∏–ø –∫–æ–≤—Ä–∏–∫–∞: {user_data['chosen_typeof']}\n\
–¶–≤–µ—Ç: {user_data['chosen_colorof']}\n\
–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è: {user_data['type_of_fastening']}\n\
–¢–∏–ø –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞: {user_data['type_of_pyatka']}\n\
–®–∏–ª–¥–∏–∫: {user_data['shield']}", reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.final)


@router.message(MakeOrder.shield)
@router.callback_query(F.data == 'no_shield')
async def order_12_summary(query: CallbackQuery, state: FSMContext):
    await state.update_data(shield='–ù–µ –Ω—É–∂–µ–Ω')
    user_data = await state.get_data()
    await query.message.answer(text='–§–æ—Ç–æ')
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ü–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 5%",
        callback_data="finally")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å",
        callback_data="help")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_input_13")
    )
    await query.message.answer(text=f"\
–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑! –ú—ã —É–∂–µ –ø–æ–¥–±–∏—Ä–∞–µ–º –ª–µ–∫–∞–ª–∞ –ø–æ–¥ —Ç–≤–æ–∏ –∫–æ–≤—Ä–∏–∫–∏üî•\n\
–ü—Ä–æ–≤–µ—Ä—å, –≤—Å–µ –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–∫–∞–∑–µ –≤–µ—Ä–Ω—ã, –æ—Å–æ–±–µ–Ω–Ω–æ —Ç–µ–ª–µ—Ñ–æ–Ω\n\
–ï—Å–ª–∏ –Ω—É–∂–Ω–æ —á—Ç–æ-—Ç–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å, –Ω–∞–ø–∏—à–∏ –≤ –ø–æ–ª–µ –Ω–∏–∂–µ, –º—ã —Ä–∞–∑–±–µ—Ä–µ–º—Å—è :)\n\
–í–∞—à–µ –∏–º—è: {user_data['chosen_name']}\n\
–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω: {user_data['chosen_phone']}\n\
–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å: {user_data['chosen_model']}\n\
–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {user_data['chosen_date']}\n\
–ö—É–∑–æ–≤ –∞–≤—Ç–æ: {user_data['chosen_kuzov']}\n\
–î–æ–ø.–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_data['chosen_info']}\n\
–¢–∏–ø –∫–æ–≤—Ä–∏–∫–∞: {user_data['chosen_typeof']}\n\
–¶–≤–µ—Ç: {user_data['chosen_colorof']}\n\
–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è: {user_data['type_of_fastening']}\n\
–¢–∏–ø –ø–æ–¥–ø—è—Ç–Ω–∏–∫–∞: {user_data['type_of_pyatka']}\n\
–®–∏–ª–¥–∏–∫: {user_data['shield']}", reply_markup=builder.as_markup())
    await state.set_state(MakeOrder.final)


@router.message(MakeOrder.final)
@router.callback_query(F.data == 'finally')
async def order_13_final(query: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    print(user_data)
    await query.message.answer(text='*–í–∏–¥–µ–æ*')
    await query.message.answer(text='–ú—ã —Å–≤—è–∂–µ–º—Å—è –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞!\n\
–ê –ø–æ–∫–∞ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–ª–∏–∫ –æ –¥—Ä—É–≥–æ–π –Ω–∞—à–µ–π –ø—Ä–æ–¥—É–∫–∫—Ü–∏–∏ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É 5%')


# –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª
# –û—Ç–≤–µ—Ç–≤–ª–µ–Ω–∏–µ–†–æ–º–± –∏–ª–∏ —Å–æ—Ç–∞
# –ü–æ–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
# –ü–æ–¥—É–º–∞—Ç—å —á–µ –¥–µ–ª–∞—Ç—å —Å –∫–Ω–æ–ø–∫–æ–π "–ú–Ω–µ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å" -------–ú–± –∏—Ö –∑–∞—Ö–∞—Ä–¥–∫–æ–¥–∏—Ç—å?
# –û—Ç–¥–µ–ª—å–Ω—ã–π –ª–∏–Ω–µ–π–Ω—ã–π –≤—ã–±–æ—Ä —Ü–≤–µ—Ç–∞ –∫–æ–≤—Ä–∏–∫–∞ –∏ —Ü–≤–µ—Ç–∞ –∫–∞–Ω—Ç–∞
# –í—ã–≤–æ–¥ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∏–Ω–∞–ª–µ
# –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –±–µ–∑–¥–µ–π—Å—Ç–≤–∏—è
# –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ –Ω–∞ –ø–æ—á—Ç—É


# –í–∏–∑—É–∞–ª
# –ù–∞—á–∞—Ç—å –¥–µ–ª–∞—Ç—å –∫—Ä–∞—Å–∏–≤—ã–π —Ç–µ–∫—Å—Ç, —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –æ—Ç—Å—Ç—É–ø—ã
# –ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª—è—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–∂–µ–ª–∞—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Ñ–∏–ª—å—Ç—Ä—ã?
# –ó–∞–≤–µ—Ä–Ω—É—Ç—å –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
# –î–µ–ø–ª–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –Ω–∞ VPS
